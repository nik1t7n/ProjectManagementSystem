@page "/createemployee"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@rendermode RenderMode.InteractiveServer

<h3>Create Employee</h3>

<EditForm Model="@employee" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group mb-2">
        <label for="firstName">First Name</label>
        <InputText id="firstName" class="form-control" @bind-Value="employee.FirstName" />
        @if (!string.IsNullOrWhiteSpace(employee.FirstName) && !IsValidName(employee.FirstName))
        {
            <p style="color: red;">Please enter a valid first name (letters only).</p>
        }
    </div>

    <div class="form-group mb-2">
        <label for="surname">Surname</label>
        <InputText id="surname" class="form-control" @bind-Value="employee.Surname" />
        @if (!string.IsNullOrWhiteSpace(employee.Surname) && !IsValidName(employee.Surname))
        {
            <p style="color: red;">Please enter a valid surname (letters only).</p>
        }
    </div>

    <div class="form-group mb-2">
        <label for="middleName">Middle Name</label>
        <InputText id="middleName" class="form-control" @bind-Value="employee.MiddleName" />
        @if (!string.IsNullOrWhiteSpace(employee.MiddleName) && !IsValidName(employee.MiddleName))
        {
            <p style="color: red;">Please enter a valid middle name (letters only).</p>
        }
    </div>

    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" class="form-control" @bind-Value="employee.Email" />
        @if (!string.IsNullOrWhiteSpace(employee.Email) && !IsValidEmail(employee.Email))
        {
            <p style="color: red;">Please enter a valid email address.</p>
        }
    </div>

    <button type="submit" class="btn btn-primary mt-3 mb-3 shadow">Create</button>
</EditForm>

@code {
    private EmployeeDTO employee = new EmployeeDTO();

    private async Task HandleSubmit()
    {
        if (!IsValidEmail(employee.Email))
        {
            return;
        }

        var response = await Http.PostAsJsonAsync("api/Employee/Add", employee);
        var result = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/createdemployeesuccess");
        }
        else
        {
            NavigationManager.NavigateTo("/createdemployeeerror");
        }
    }

    private bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }

    private bool IsValidName(string name)
    {
        return !string.IsNullOrWhiteSpace(name) && name.All(char.IsLetter);
    }
}
