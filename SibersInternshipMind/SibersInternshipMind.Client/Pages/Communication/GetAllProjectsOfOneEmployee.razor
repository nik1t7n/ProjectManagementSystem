@page "/getallprojectsofoneemployee"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@rendermode RenderMode.InteractiveServer

<h3 class="mb-3">All Projects of One Employee</h3>

<div class="form-group mb-3">
    <label for="selectEmployee">Select Employee:</label>
    <select id="selectEmployee" class="form-control" @bind="SelectedEmployeeId" @oninput="LoadProjects">
        <option value="0">-- Select Employee --</option>
        @foreach (var employee in Employees)
        {
            <option value="@employee.Id">@employee.FirstName @employee.Surname</option>
        }
    </select>
</div>

@if (SelectedEmployeeId != 0)
{
    @if (Projects != null && Projects.Any())
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Project ID</th>
                    <th>Name</th>
                    <th>Client Company</th>
                    <th>Vendor Company</th>
                    <th>Manager</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Priority</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var project in Projects)
                {
                    <tr>
                        <td>@project.Id</td>
                        <td>@project.Name</td>
                        <td>@project.ClientCompany</td>
                        <td>@project.VendorCompany</td>
                        <td>@ManagerName</td>
                        <td>@project.StartDate</td>
                        <td>@project.EndDate</td>
                        <td>@project.Priority</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No projects found for the selected employee.</p>
    }
}

@code {
    private List<Employee> Employees = new List<Employee>();
    private List<Project> Projects = new List<Project>();
    private int SelectedEmployeeId { get; set; }
    private string? ManagerName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Employees = await Http.GetFromJsonAsync<List<Employee>>("/api/Employee/GetAll"); // get all employees
    }

    private async Task LoadProjects(ChangeEventArgs e)
    {
        SelectedEmployeeId = Convert.ToInt32(e.Value);
        if (SelectedEmployeeId != 0)
        {
            var response = await Http.GetAsync($"/api/communication/GetAllProjectsOfOneEmployee?employeeId={SelectedEmployeeId}");
            if (response.IsSuccessStatusCode)
            {
                Projects = await response.Content.ReadFromJsonAsync<List<Project>>(); // get all projects for specified employee
                foreach (var project in Projects)
                {
                    await LoadProjectManager(project); // load a manager for each project
                }
            }
            else
            {
                Projects = new List<Project>(); // reset projects list if unsuccess
            }
        }
        else
        {
            Projects = new List<Project>(); // reset projects list if an employee is not chosen
        }
    }

    private async Task LoadProjectManager(Project project)
    {
        if (project.ManagerId != 0)
        {
            var projectManagerResponse = await Http.GetAsync($"/api/Employee/GetById/{project.ManagerId}");
            if (projectManagerResponse.IsSuccessStatusCode)
            {
                var projectManager = await projectManagerResponse.Content.ReadFromJsonAsync<Employee>();
                if (projectManager != null)
                {
                    ManagerName = $"{projectManager.FirstName} {projectManager.Surname}";
                }
                else
                {
                    ManagerName = "Not Assigned"; // Присваиваем "Not Assigned", если менеджер не найден
                }
            }
            else
            {
                ManagerName = "Error Loading Manager"; // Присваиваем "Error Loading Manager", если запрос к API завершился неудачно
            }
        }
        else
        {
            ManagerName = "Not Assigned";
        }
    }
}
